package poker;

import java.util.ArrayList;

/**
 * ポーカーゲーム用のインターフェース
 * @version 1.0
 * @since 2017-05-08
 * @author tatsuhiko ueno
 */
public interface PorkerInterface {

	/* ====================================================================== */
	//
	// フィールドの宣言
	// ※すべて public static final なフィールドである（外部から書き換え不可）
	//
	/* ====================================================================== */
	/**
	 * 役番号:
	 * 0:役なし 1:ワンペア 2:ツーペア 3:スリーカード
	 * 4:ストレート 5:フラッシュ 6:フルハウス
	 * 7:フォーカード 8:ストレートフラッシュ 9:ロイヤルストレートフラッシュ
	 */
	// 役の判定後のコンソール表示用のメッセージ
	String NONE = "役がありませんでした";
	String ONEPAIR = "ワンペアです！";
	String TWOPAIR = "ツーペアです！";
	String THREECARD = "スリーカードです！";
	String STRAIGHT = "ストレートです！";
	String FLUSH = "フラッシュです！";
	String FULLHOUSE = "フルハウスです！";
	String FOURCARD = "おめでとうございます！フォーカードです！";
	String STRAIGHT_FLUSH = "おめでとうございます！ストレートフラッシュです！";
	String ROYAL_STRAIGHT_FLUSH = "おめでとうございます！ロイヤルストレートフラッシュです！";


	/* ====================================================================== */
	//
	// メソッドの宣言
	// ※すべて public abstract なメソッドである
	//
	/* ====================================================================== */
	/**
	 * プレイヤーにカードの山から5枚手札を配る
	 * @param card : ArrayList<Integer> カードの山、ゲーム開始時は52枚、1枚配ったら合計枚数から1減らす必要がある
	 * @return 返り値なし
	 */
	void deal(ArrayList<Integer> card);

	/**
	 * カードの山から引いたカードと手札から指定したカードを交換する
	 * @param card : ArrayList<Integer> カードの山、ゲーム開始時は52枚、1枚配ったら合計枚数から1減らす必要がある
	 * @param num : int 交換するカードの番号、番号は0～4が渡され、それぞれ1枚目～5枚目に対応
	 * @return 返り値なし
	 */
	void change(ArrayList<Integer> card, int num);

	/**
	 * 手札カードの役を判定する
	 * 手札を絵柄（1:ハート 2:スペード 3:ダイヤ 4:クラブ）と数字（1～13）に分ける
	 * 数字で昇順ソートを行う、このとき絵柄も対になるようにソートすること
	 * 手札カードの役を判定する（ロジックは別紙に記載）
	 * @param 引数なし
	 * @return 返り値なし
	 */
	void judge();

	/**
	 * 手札カードを表示する
	 * @param 引数なし
	 * @return 返り値なし
	 */
	void show();

	/**
	 * 手札カードの数値を表示用に変換する 例:17->♠4（クラス内部で呼ばれるメソッド）
	 * 絵柄の分け方は次のとおり、1-13->♥、14-26->♠、27-39->♦、40-52->♣
	 * 数字の表記の仕方は次のとおり、2～10->そのまま、1->A 11->J、12->Q、13->K
	 * @param value : int カード番号（1～52）
	 * @return String 変換した表示用の文字列（例:💛A）
	 */
	String disp(int value);

	/**
	 * カードの役を表示する
	 * @param 引数なし
	 * @return 返り値なし
	 */
	void printHand();

	/**
	 * 手札や役番号をクリアする
	 * @param 引数なし
	 * @return 返り値なし
	 */
	void clear();

}